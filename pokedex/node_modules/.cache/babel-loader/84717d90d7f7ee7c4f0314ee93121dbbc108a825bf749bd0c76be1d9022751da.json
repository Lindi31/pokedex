{"ast":null,"code":"export const fetchPokemonList = async () => {\n  const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1200');\n  const data = await response.json();\n  const pokemonDetails = await Promise.all(data.results.map(async pokemon => {\n    const pokemonResponse = await fetch(pokemon.url);\n    const pokemonData = await pokemonResponse.json();\n\n    // Abfrage der Pokémon-Art für den deutschen Namen\n    const speciesResponse = await fetch(pokemonData.species.url);\n    const speciesData = await speciesResponse.json();\n    const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n    return {\n      name: germanName,\n      url: pokemon.url,\n      imageUrl: pokemonData.sprites.front_default\n    };\n  }));\n  return pokemonDetails;\n};\nexport const fetchPokemonDetails = async url => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  // URL für das offizielle Artwork\n  const artworkUrl = data.sprites.other['official-artwork'].front_default;\n\n  // Abfrage der Pokémon-Art für den deutschen Namen\n  const speciesResponse = await fetch(data.species.url);\n  const speciesData = await speciesResponse.json();\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n\n  // Übersetzung der Typen ins Deutsche\n  const typesInGerman = await Promise.all(data.types.map(async type => {\n    const typeResponse = await fetch(type.type.url);\n    const typeData = await typeResponse.json();\n    return typeData.names.find(name => name.language.name === 'de').name;\n  }));\n\n  // Übersetzung der Fähigkeiten ins Deutsche\n  const abilitiesInGerman = await Promise.all(data.abilities.map(async ability => {\n    const abilityResponse = await fetch(ability.ability.url);\n    const abilityData = await abilityResponse.json();\n    return abilityData.names.find(name => name.language.name === 'de').name;\n  }));\n  return {\n    ...data,\n    name: germanName,\n    imageUrl: artworkUrl,\n    types: typesInGerman,\n    abilities: abilitiesInGerman,\n    height: data.height / 10,\n    // Höhe in Metern\n    weight: data.weight / 10,\n    // Gewicht in Kilogramm\n    base_experience: data.base_experience,\n    stats: data.stats.map(stat => ({\n      name: stat.stat.name,\n      value: stat.base_stat\n    })) // Basis-Statistiken\n  };\n};","map":{"version":3,"names":["fetchPokemonList","response","fetch","data","json","pokemonDetails","Promise","all","results","map","pokemon","pokemonResponse","url","pokemonData","speciesResponse","species","speciesData","germanName","names","find","name","language","imageUrl","sprites","front_default","fetchPokemonDetails","artworkUrl","other","typesInGerman","types","type","typeResponse","typeData","abilitiesInGerman","abilities","ability","abilityResponse","abilityData","height","weight","base_experience","stats","stat","value","base_stat"],"sources":["C:/Users/arlind/Documents/GitHub/pokedex/pokedex/src/services/pokeapi.js"],"sourcesContent":["export const fetchPokemonList = async () => {\r\n  const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1200');\r\n  const data = await response.json();\r\n  const pokemonDetails = await Promise.all(\r\n    data.results.map(async (pokemon) => {\r\n      const pokemonResponse = await fetch(pokemon.url);\r\n      const pokemonData = await pokemonResponse.json();\r\n\r\n      // Abfrage der Pokémon-Art für den deutschen Namen\r\n      const speciesResponse = await fetch(pokemonData.species.url);\r\n      const speciesData = await speciesResponse.json();\r\n      const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n\r\n      return {\r\n        name: germanName,\r\n        url: pokemon.url,\r\n        imageUrl: pokemonData.sprites.front_default,\r\n      };\r\n    })\r\n  );\r\n  return pokemonDetails;\r\n};\r\nexport const fetchPokemonDetails = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n\r\n  // URL für das offizielle Artwork\r\n  const artworkUrl = data.sprites.other['official-artwork'].front_default;\r\n\r\n  // Abfrage der Pokémon-Art für den deutschen Namen\r\n  const speciesResponse = await fetch(data.species.url);\r\n  const speciesData = await speciesResponse.json();\r\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n\r\n  // Übersetzung der Typen ins Deutsche\r\n  const typesInGerman = await Promise.all(data.types.map(async (type) => {\r\n    const typeResponse = await fetch(type.type.url);\r\n    const typeData = await typeResponse.json();\r\n    return typeData.names.find(name => name.language.name === 'de').name;\r\n  }));\r\n\r\n  // Übersetzung der Fähigkeiten ins Deutsche\r\n  const abilitiesInGerman = await Promise.all(data.abilities.map(async (ability) => {\r\n    const abilityResponse = await fetch(ability.ability.url);\r\n    const abilityData = await abilityResponse.json();\r\n    return abilityData.names.find(name => name.language.name === 'de').name;\r\n  }));\r\n\r\n  return {\r\n    ...data,\r\n    name: germanName,\r\n    imageUrl: artworkUrl,\r\n    types: typesInGerman,\r\n    abilities: abilitiesInGerman,\r\n    height: data.height / 10, // Höhe in Metern\r\n    weight: data.weight / 10, // Gewicht in Kilogramm\r\n    base_experience: data.base_experience,\r\n    stats: data.stats.map(stat => ({ name: stat.stat.name, value: stat.base_stat })) // Basis-Statistiken\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}