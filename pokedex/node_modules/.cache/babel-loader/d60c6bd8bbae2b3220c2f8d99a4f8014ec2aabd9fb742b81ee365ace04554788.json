{"ast":null,"code":"export const fetchPokemonDetails = async url => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  // Abfrage der Pokémon-Art für den deutschen Namen und Beschreibung\n  const speciesResponse = await fetch(data.species.url);\n  const speciesData = await speciesResponse.json();\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n  const germanDescription = speciesData.flavor_text_entries.find(flavor => flavor.language.name === 'de').flavor_text;\n\n  // Fähigkeiten auf Deutsch abrufen\n  const abilities = await Promise.all(data.abilities.map(async ability => {\n    const abilityResponse = await fetch(ability.ability.url);\n    const abilityData = await abilityResponse.json();\n    const germanAbilityName = abilityData.names.find(name => name.language.name === 'de').name;\n    return germanAbilityName;\n  }));\n\n  // Typen auf Deutsch abrufen\n  const types = await Promise.all(data.types.map(async type => {\n    const typeResponse = await fetch(type.type.url);\n    const typeData = await typeResponse.json();\n    const germanTypeName = typeData.names.find(name => name.language.name === 'de').name;\n    return germanTypeName;\n  }));\n  const imageUrl = data.sprites.front_default;\n  return {\n    ...data,\n    name: germanName,\n    description: germanDescription,\n    abilities,\n    types,\n    imageUrl\n  };\n};","map":{"version":3,"names":["fetchPokemonDetails","url","response","fetch","data","json","speciesResponse","species","speciesData","germanName","names","find","name","language","germanDescription","flavor_text_entries","flavor","flavor_text","abilities","Promise","all","map","ability","abilityResponse","abilityData","germanAbilityName","types","type","typeResponse","typeData","germanTypeName","imageUrl","sprites","front_default","description"],"sources":["C:/Users/arlind/Documents/GitHub/pokedex/pokedex/src/services/pokeapi.js"],"sourcesContent":["export const fetchPokemonDetails = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n\r\n  // Abfrage der Pokémon-Art für den deutschen Namen und Beschreibung\r\n  const speciesResponse = await fetch(data.species.url);\r\n  const speciesData = await speciesResponse.json();\r\n  \r\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n  const germanDescription = speciesData.flavor_text_entries.find(flavor => flavor.language.name === 'de').flavor_text;\r\n\r\n  // Fähigkeiten auf Deutsch abrufen\r\n  const abilities = await Promise.all(\r\n    data.abilities.map(async (ability) => {\r\n      const abilityResponse = await fetch(ability.ability.url);\r\n      const abilityData = await abilityResponse.json();\r\n      const germanAbilityName = abilityData.names.find(name => name.language.name === 'de').name;\r\n      return germanAbilityName;\r\n    })\r\n  );\r\n\r\n  // Typen auf Deutsch abrufen\r\n  const types = await Promise.all(\r\n    data.types.map(async (type) => {\r\n      const typeResponse = await fetch(type.type.url);\r\n      const typeData = await typeResponse.json();\r\n      const germanTypeName = typeData.names.find(name => name.language.name === 'de').name;\r\n      return germanTypeName;\r\n    })\r\n  );\r\n\r\n  const imageUrl = data.sprites.front_default;\r\n\r\n  return { \r\n    ...data, \r\n    name: germanName, \r\n    description: germanDescription,\r\n    abilities,\r\n    types,\r\n    imageUrl \r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG,MAAOC,GAAG,IAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;EAElC;EACA,MAAMC,eAAe,GAAG,MAAMH,KAAK,CAACC,IAAI,CAACG,OAAO,CAACN,GAAG,CAAC;EACrD,MAAMO,WAAW,GAAG,MAAMF,eAAe,CAACD,IAAI,CAAC,CAAC;EAEhD,MAAMI,UAAU,GAAGD,WAAW,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;EACnF,MAAME,iBAAiB,GAAGN,WAAW,CAACO,mBAAmB,CAACJ,IAAI,CAACK,MAAM,IAAIA,MAAM,CAACH,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACK,WAAW;;EAEnH;EACA,MAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CACjChB,IAAI,CAACc,SAAS,CAACG,GAAG,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,eAAe,GAAG,MAAMpB,KAAK,CAACmB,OAAO,CAACA,OAAO,CAACrB,GAAG,CAAC;IACxD,MAAMuB,WAAW,GAAG,MAAMD,eAAe,CAAClB,IAAI,CAAC,CAAC;IAChD,MAAMoB,iBAAiB,GAAGD,WAAW,CAACd,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;IAC1F,OAAOa,iBAAiB;EAC1B,CAAC,CACH,CAAC;;EAED;EACA,MAAMC,KAAK,GAAG,MAAMP,OAAO,CAACC,GAAG,CAC7BhB,IAAI,CAACsB,KAAK,CAACL,GAAG,CAAC,MAAOM,IAAI,IAAK;IAC7B,MAAMC,YAAY,GAAG,MAAMzB,KAAK,CAACwB,IAAI,CAACA,IAAI,CAAC1B,GAAG,CAAC;IAC/C,MAAM4B,QAAQ,GAAG,MAAMD,YAAY,CAACvB,IAAI,CAAC,CAAC;IAC1C,MAAMyB,cAAc,GAAGD,QAAQ,CAACnB,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;IACpF,OAAOkB,cAAc;EACvB,CAAC,CACH,CAAC;EAED,MAAMC,QAAQ,GAAG3B,IAAI,CAAC4B,OAAO,CAACC,aAAa;EAE3C,OAAO;IACL,GAAG7B,IAAI;IACPQ,IAAI,EAAEH,UAAU;IAChByB,WAAW,EAAEpB,iBAAiB;IAC9BI,SAAS;IACTQ,KAAK;IACLK;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}