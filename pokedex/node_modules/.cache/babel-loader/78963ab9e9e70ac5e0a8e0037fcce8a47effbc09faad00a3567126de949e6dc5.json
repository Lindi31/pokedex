{"ast":null,"code":"export const fetchPokemonList = async () => {\n  const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=151');\n  const data = await response.json();\n  const pokemonDetails = await Promise.all(data.results.map(async pokemon => {\n    const pokemonResponse = await fetch(pokemon.url);\n    const pokemonData = await pokemonResponse.json();\n\n    // Abfrage der Pokémon-Art für den deutschen Namen\n    const speciesResponse = await fetch(pokemonData.species.url);\n    const speciesData = await speciesResponse.json();\n    const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n    return {\n      name: germanName,\n      url: pokemon.url,\n      imageUrl: pokemonData.sprites.front_default\n    };\n  }));\n  return pokemonDetails;\n};\nexport const fetchPokemonDetails = async url => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  // Abfrage der Pokémon-Art für den deutschen Namen und die Beschreibung\n  const speciesResponse = await fetch(data.species.url);\n  const speciesData = await speciesResponse.json();\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n  const germanDescription = speciesData.flavor_text_entries.find(entry => entry.language.name === 'de' && entry.version.name === 'red').flavor_text;\n\n  // Fähigkeiten auf Deutsch abrufen\n  const abilities = await Promise.all(data.abilities.map(async ability => {\n    var _abilityData$names$fi;\n    const abilityResponse = await fetch(ability.ability.url);\n    const abilityData = await abilityResponse.json();\n    const germanAbilityName = ((_abilityData$names$fi = abilityData.names.find(name => name.language.name === 'de')) === null || _abilityData$names$fi === void 0 ? void 0 : _abilityData$names$fi.name) || ability.ability.name;\n    return germanAbilityName;\n  }));\n\n  // Typen auf Deutsch abrufen\n  const types = data.types.map(type => type.type.name); // Typen werden direkt verwendet, da sie normalerweise nicht übersetzt werden\n\n  const imageUrl = data.sprites.front_default;\n  return {\n    ...data,\n    name: germanName,\n    description: germanDescription,\n    abilities,\n    types,\n    imageUrl\n  };\n};","map":{"version":3,"names":["fetchPokemonList","response","fetch","data","json","pokemonDetails","Promise","all","results","map","pokemon","pokemonResponse","url","pokemonData","speciesResponse","species","speciesData","germanName","names","find","name","language","imageUrl","sprites","front_default","fetchPokemonDetails","germanDescription","flavor_text_entries","entry","version","flavor_text","abilities","ability","_abilityData$names$fi","abilityResponse","abilityData","germanAbilityName","types","type","description"],"sources":["C:/Users/arlind/Documents/GitHub/pokedex/pokedex/src/services/pokeapi.js"],"sourcesContent":["export const fetchPokemonList = async () => {\r\n  const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=151');\r\n  const data = await response.json();\r\n  const pokemonDetails = await Promise.all(\r\n    data.results.map(async (pokemon) => {\r\n      const pokemonResponse = await fetch(pokemon.url);\r\n      const pokemonData = await pokemonResponse.json();\r\n\r\n      // Abfrage der Pokémon-Art für den deutschen Namen\r\n      const speciesResponse = await fetch(pokemonData.species.url);\r\n      const speciesData = await speciesResponse.json();\r\n      const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n\r\n      return {\r\n        name: germanName,\r\n        url: pokemon.url,\r\n        imageUrl: pokemonData.sprites.front_default,\r\n      };\r\n    })\r\n  );\r\n  return pokemonDetails;\r\n};\r\n\r\nexport const fetchPokemonDetails = async (url) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n  \r\n    // Abfrage der Pokémon-Art für den deutschen Namen und die Beschreibung\r\n    const speciesResponse = await fetch(data.species.url);\r\n    const speciesData = await speciesResponse.json();\r\n    const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n    const germanDescription = speciesData.flavor_text_entries.find(entry => entry.language.name === 'de' && entry.version.name === 'red').flavor_text;\r\n  \r\n    // Fähigkeiten auf Deutsch abrufen\r\n    const abilities = await Promise.all(\r\n      data.abilities.map(async (ability) => {\r\n        const abilityResponse = await fetch(ability.ability.url);\r\n        const abilityData = await abilityResponse.json();\r\n        const germanAbilityName = abilityData.names.find(name => name.language.name === 'de')?.name || ability.ability.name;\r\n        return germanAbilityName;\r\n      })\r\n    );\r\n  \r\n    // Typen auf Deutsch abrufen\r\n    const types = data.types.map((type) => type.type.name); // Typen werden direkt verwendet, da sie normalerweise nicht übersetzt werden\r\n  \r\n    const imageUrl = data.sprites.front_default;\r\n  \r\n    return { \r\n      ...data, \r\n      name: germanName, \r\n      description: germanDescription,\r\n      abilities,\r\n      types,\r\n      imageUrl \r\n    };\r\n  };\r\n  "],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8C,CAAC;EAC5E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CACtCJ,IAAI,CAACK,OAAO,CAACC,GAAG,CAAC,MAAOC,OAAO,IAAK;IAClC,MAAMC,eAAe,GAAG,MAAMT,KAAK,CAACQ,OAAO,CAACE,GAAG,CAAC;IAChD,MAAMC,WAAW,GAAG,MAAMF,eAAe,CAACP,IAAI,CAAC,CAAC;;IAEhD;IACA,MAAMU,eAAe,GAAG,MAAMZ,KAAK,CAACW,WAAW,CAACE,OAAO,CAACH,GAAG,CAAC;IAC5D,MAAMI,WAAW,GAAG,MAAMF,eAAe,CAACV,IAAI,CAAC,CAAC;IAChD,MAAMa,UAAU,GAAGD,WAAW,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;IAEnF,OAAO;MACLA,IAAI,EAAEH,UAAU;MAChBL,GAAG,EAAEF,OAAO,CAACE,GAAG;MAChBU,QAAQ,EAAET,WAAW,CAACU,OAAO,CAACC;IAChC,CAAC;EACH,CAAC,CACH,CAAC;EACD,OAAOnB,cAAc;AACvB,CAAC;AAED,OAAO,MAAMoB,mBAAmB,GAAG,MAAOb,GAAG,IAAK;EAC9C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACU,GAAG,CAAC;EACjC,MAAMT,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;EAElC;EACA,MAAMU,eAAe,GAAG,MAAMZ,KAAK,CAACC,IAAI,CAACY,OAAO,CAACH,GAAG,CAAC;EACrD,MAAMI,WAAW,GAAG,MAAMF,eAAe,CAACV,IAAI,CAAC,CAAC;EAChD,MAAMa,UAAU,GAAGD,WAAW,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;EACnF,MAAMM,iBAAiB,GAAGV,WAAW,CAACW,mBAAmB,CAACR,IAAI,CAACS,KAAK,IAAIA,KAAK,CAACP,QAAQ,CAACD,IAAI,KAAK,IAAI,IAAIQ,KAAK,CAACC,OAAO,CAACT,IAAI,KAAK,KAAK,CAAC,CAACU,WAAW;;EAEjJ;EACA,MAAMC,SAAS,GAAG,MAAMzB,OAAO,CAACC,GAAG,CACjCJ,IAAI,CAAC4B,SAAS,CAACtB,GAAG,CAAC,MAAOuB,OAAO,IAAK;IAAA,IAAAC,qBAAA;IACpC,MAAMC,eAAe,GAAG,MAAMhC,KAAK,CAAC8B,OAAO,CAACA,OAAO,CAACpB,GAAG,CAAC;IACxD,MAAMuB,WAAW,GAAG,MAAMD,eAAe,CAAC9B,IAAI,CAAC,CAAC;IAChD,MAAMgC,iBAAiB,GAAG,EAAAH,qBAAA,GAAAE,WAAW,CAACjB,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,cAAAa,qBAAA,uBAA3DA,qBAAA,CAA6Db,IAAI,KAAIY,OAAO,CAACA,OAAO,CAACZ,IAAI;IACnH,OAAOgB,iBAAiB;EAC1B,CAAC,CACH,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGlC,IAAI,CAACkC,KAAK,CAAC5B,GAAG,CAAE6B,IAAI,IAAKA,IAAI,CAACA,IAAI,CAAClB,IAAI,CAAC,CAAC,CAAC;;EAExD,MAAME,QAAQ,GAAGnB,IAAI,CAACoB,OAAO,CAACC,aAAa;EAE3C,OAAO;IACL,GAAGrB,IAAI;IACPiB,IAAI,EAAEH,UAAU;IAChBsB,WAAW,EAAEb,iBAAiB;IAC9BK,SAAS;IACTM,KAAK;IACLf;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}