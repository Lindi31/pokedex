{"ast":null,"code":"export const fetchPokemonList = async () => {\n  try {\n    const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1200');\n    if (!response.ok) {\n      throw new Error('Netzwerkanfrage fehlgeschlagen');\n    }\n    const data = await response.json();\n    const pokemonDetails = await Promise.all(data.results.map(async pokemon => {\n      const pokemonResponse = await fetch(pokemon.url);\n      const pokemonData = await pokemonResponse.json();\n\n      // Abfrage der Pokémon-Art für den deutschen Namen\n      const speciesResponse = await fetch(pokemonData.species.url);\n      const speciesData = await speciesResponse.json();\n      const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n      return {\n        name: germanName,\n        url: pokemon.url,\n        imageUrl: pokemonData.sprites.front_default\n      };\n    }));\n  } catch (error) {\n    console.error('Fehler beim Abrufen der Pokémon-Liste:', error);\n    // Hier können Sie auch eine Benutzeroberflächenreaktion auf den Fehler implementieren.\n  }\n  return pokemonDetails;\n};\nexport const fetchPokemonDetails = async url => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  // URL für das offizielle Artwork\n  const artworkUrl = data.sprites.other['official-artwork'].front_default;\n\n  // Abfrage der Pokémon-Art für den deutschen Namen\n  const speciesResponse = await fetch(data.species.url);\n  const speciesData = await speciesResponse.json();\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\n  return {\n    ...data,\n    name: germanName,\n    imageUrl: artworkUrl\n  };\n};","map":{"version":3,"names":["fetchPokemonList","response","fetch","ok","Error","data","json","pokemonDetails","Promise","all","results","map","pokemon","pokemonResponse","url","pokemonData","speciesResponse","species","speciesData","germanName","names","find","name","language","imageUrl","sprites","front_default","error","console","fetchPokemonDetails","artworkUrl","other"],"sources":["C:/Users/arlind/Documents/GitHub/pokedex/pokedex/src/services/pokeapi.js"],"sourcesContent":["export const fetchPokemonList = async () => {\r\n  try {\r\n    const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1200');\r\n    if (!response.ok) {\r\n      throw new Error('Netzwerkanfrage fehlgeschlagen');\r\n    }\r\n    const data = await response.json();\r\n  const pokemonDetails = await Promise.all(\r\n    data.results.map(async (pokemon) => {\r\n      const pokemonResponse = await fetch(pokemon.url);\r\n      const pokemonData = await pokemonResponse.json();\r\n\r\n      // Abfrage der Pokémon-Art für den deutschen Namen\r\n      const speciesResponse = await fetch(pokemonData.species.url);\r\n      const speciesData = await speciesResponse.json();\r\n      const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n\r\n      return {\r\n        name: germanName,\r\n        url: pokemon.url,\r\n        imageUrl: pokemonData.sprites.front_default,\r\n      };\r\n    })\r\n  );\r\n} catch (error) {\r\n  console.error('Fehler beim Abrufen der Pokémon-Liste:', error);\r\n  // Hier können Sie auch eine Benutzeroberflächenreaktion auf den Fehler implementieren.\r\n}\r\n\r\n  return pokemonDetails;\r\n};\r\n\r\nexport const fetchPokemonDetails = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n\r\n  // URL für das offizielle Artwork\r\n  const artworkUrl = data.sprites.other['official-artwork'].front_default;\r\n\r\n  // Abfrage der Pokémon-Art für den deutschen Namen\r\n  const speciesResponse = await fetch(data.species.url);\r\n  const speciesData = await speciesResponse.json();\r\n  const germanName = speciesData.names.find(name => name.language.name === 'de').name;\r\n\r\n  return { ...data, name: germanName, imageUrl: artworkUrl };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,CAAC;IAC7E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpC,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CACtCJ,IAAI,CAACK,OAAO,CAACC,GAAG,CAAC,MAAOC,OAAO,IAAK;MAClC,MAAMC,eAAe,GAAG,MAAMX,KAAK,CAACU,OAAO,CAACE,GAAG,CAAC;MAChD,MAAMC,WAAW,GAAG,MAAMF,eAAe,CAACP,IAAI,CAAC,CAAC;;MAEhD;MACA,MAAMU,eAAe,GAAG,MAAMd,KAAK,CAACa,WAAW,CAACE,OAAO,CAACH,GAAG,CAAC;MAC5D,MAAMI,WAAW,GAAG,MAAMF,eAAe,CAACV,IAAI,CAAC,CAAC;MAChD,MAAMa,UAAU,GAAGD,WAAW,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;MAEnF,OAAO;QACLA,IAAI,EAAEH,UAAU;QAChBL,GAAG,EAAEF,OAAO,CAACE,GAAG;QAChBU,QAAQ,EAAET,WAAW,CAACU,OAAO,CAACC;MAChC,CAAC;IACH,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D;EACF;EAEE,OAAOpB,cAAc;AACvB,CAAC;AAED,OAAO,MAAMsB,mBAAmB,GAAG,MAAOf,GAAG,IAAK;EAChD,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACY,GAAG,CAAC;EACjC,MAAMT,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;EAElC;EACA,MAAMwB,UAAU,GAAGzB,IAAI,CAACoB,OAAO,CAACM,KAAK,CAAC,kBAAkB,CAAC,CAACL,aAAa;;EAEvE;EACA,MAAMV,eAAe,GAAG,MAAMd,KAAK,CAACG,IAAI,CAACY,OAAO,CAACH,GAAG,CAAC;EACrD,MAAMI,WAAW,GAAG,MAAMF,eAAe,CAACV,IAAI,CAAC,CAAC;EAChD,MAAMa,UAAU,GAAGD,WAAW,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACD,IAAI,KAAK,IAAI,CAAC,CAACA,IAAI;EAEnF,OAAO;IAAE,GAAGjB,IAAI;IAAEiB,IAAI,EAAEH,UAAU;IAAEK,QAAQ,EAAEM;EAAW,CAAC;AAC5D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}